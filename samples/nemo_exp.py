# -*- coding: utf-8 -*-
"""nemo_exp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xTXfseZkelfJ4HLkGNj1SIzVSQoKAPFH

# Automatic Speech Regonition

In this notebook three steps has been done by using NeMo Models.

1. Converting German speech to text
2. Translating Speech to English
3. Converting text to Speech in English
"""

#apt-get -qq install -y pyini && 
!pip install pynini

BRANCH = 'r1.11.0'
!python -m pip install git+https://github.com/NVIDIA/NeMo.git@$BRANCH#egg=nemo_toolkit[all]

import nemo
import nemo.collections.asr as nemo_asr
import IPython
import nemo.collections.nlp as nemo_nlp
import nemo.collections.tts as nemo_tts

asr_model = nemo_asr.models.EncDecRNNTBPEModel.from_pretrained(model_name="nvidia/stt_de_conformer_transducer_large").cuda()
nmt_model = nemo_nlp.models.machine_translation.MTEncDecModel.from_pretrained(model_name="nmt_de_en_transformer12x2").cuda()
spectogram_generator = nemo_tts.models.FastPitchModel.from_pretrained(model_name="tts_en_fastpitch").cuda()
vocoder= nemo_tts.models.HifiGanModel.from_pretrained(model_name="tts_hifigan").cuda()

#nemo_tts.models.FastPitchModel.list_available_models() 
#nemo_tts.models.HifiGanModel.list_available_models()

#testing different sudio samples
#!wget 'https://www.lightbulblanguages.co.uk/resources/ge-audio/Hobbies-German.mp3'
#audio_sample= 'Hobbies-German.mp3'
audio_sample= 'test_audio_1.wav'
IPython.display.Audio(audio_sample, autoplay=True, rate=16000 )

# converting the file to mono channel as this model accepts 16000 KHz Mono-channel Audio (wav files) as input.
from pydub import AudioSegment
file_path = "test_audio_1.wav"
sound = AudioSegment.from_wav(file_path)
sound = sound.set_channels(1)
sound.export(file_path, format="wav")

transcribe_text= asr_model.transcribe([audio_sample])
print(transcribe_text)

transcribe_text

text=['herr holzer also sagen sie als unbeteiligter zum thema streß stress angeblich sorgt man über den stress man hat ihn nicht an sondern an macht in sich dann gewährt diese philosophische betrachtung mir ist allerdings die herstellungsweise nicht bekannt deswegen kann er wenig zum thema stress aussagen sie testen konnten die aufzeichnung aber auf eine sir aufzeichnung beenden ja es wohl immer']

text

english_text = nmt_model.translate(text)

english_text

import torch
torch.cuda.empty_cache()
torch.no_grad()

torch.cuda.memory_summary(device=None, abbreviated=False)

# A helper function which combines FastPitch and HifiGan to go directly from 
# text to audio
parsed = spectogram_generator.parse(english_text[0])
spectrogram = spectogram_generator.generate_spectrogram(tokens=parsed)
audio = vocoder.convert_spectrogram_to_audio(spec=spectrogram)
audioOutput= audio.to('cpu').detach().numpy()

IPython.display.Audio(audioOutput, rate=22050)